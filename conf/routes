# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()
POST    /                           controllers.Application.authenticate()
GET     /home                       controllers.Application.home()
GET     /select-experiment          controllers.Application.selectExperiment()
GET     /about                      controllers.Application.about()
GET     /trial                      controllers.Application.chooseTrial(exp_type : String)
GET	/logout			    controllers.Application.logout()

GET		/check-repeat-user			controllers.Application.checkUserTakeRepeatExperiment(trial_id:Long, exp_id:Long)

GET     /brown-peterson		        controllers.BrownPeterson.info()
GET     /brown-peterson/info        controllers.BrownPeterson.infoIframe()
GET     /brown-peterson/proc		controllers.BrownPeterson.proc()
GET     /brown-peterson/proci		controllers.BrownPeterson.procIframe()
GET     /brown-peterson/experiment      controllers.BrownPeterson.experiment(trialId:Long, questionNo:Int)
POST    /brown-peterson/experiment/save  controllers.BrownPeterson.saveAnswer(trialId:Long, questionNo:Int)
GET     /brown-peterson/report      controllers.BrownPeterson.report(username:String ?= "", trial_id:Long ?= 0)

GET     /attention-blink/info            controllers.AttentionBlink.info() 
GET     /attention-blink/infoi           controllers.AttentionBlink.infoIframe()
GET     /attention-blink/proc            controllers.AttentionBlink.proc()
GET     /attention-blink/proci           controllers.AttentionBlink.procIframe()
GET     /attention-blink/demo            controllers.AttentionBlink.demoPage()
GET     /attention-blink/repeatexp     	 controllers.AttentionBlink.checkUserTakeRepeatExperiment()

GET     /stroop_effect	            controllers.StroopEffect.info()
GET     /stroop_effect/info         controllers.StroopEffect.infoIframe()
GET     /stroop_effect/proc		    controllers.StroopEffect.proc()
GET     /stroop_effect/proci	    controllers.StroopEffect.procIframe()
GET     /stroop_effect/repeatexp	controllers.StroopEffect.checkUserTakeRepeatExperiment()
GET     /stroop_effect/experiment   controllers.StroopEffect.experiment(trialId:Long, questionNo:Int)
POST    /stroop_effect/experiment/save  controllers.StroopEffect.saveAnswer(trialId:Long, questionNo:Int)
GET     /stroop-effect/report      	controllers.StroopEffect.report(username:String ?= "", trial_id:Long ?= 0)

GET     /signal_detection	            controllers.SignalDetection.info()
GET     /signal_detection/info         controllers.SignalDetection.infoIframe()
GET     /signal_detection/proc		    controllers.SignalDetection.proc()
GET     /signal_detection/proci	    controllers.SignalDetection.procIframe()
GET     /signal_detection/demo            controllers.SignalDetection.demoPage()
GET     /signal_detection/experiment   controllers.SignalDetection.experiment(trialId:Long, questionNo:Int)
GET     /signal_detection/repeatexp     	 controllers.SignalDetection.checkUserTakeRepeatExperiment()

GET     /user                       controllers.UserController.editProfile()
POST	/user 		         	controllers.UserController.saveUserProfile()
GET     /user/changepassword    controllers.UserController.changeUserPassword()
POST    /user/changepassword    controllers.UserController.saveUserPassword()

GET     /admin                      controllers.Admin.index()
GET     /admin/experiment           controllers.Admin.displayExperimentList()
GET     /admin/experiment/add       controllers.Admin.addExperiment()
POST    /admin/experiment           controllers.Admin.saveExperiment()
GET     /admin/experiment/result/:id controllers.Admin.displayExperimentResult(id : Long)
POST    /userInfo                   controllers.Admin.saveUser()
GET     /userInfo                   controllers.Admin.renderUserInfo()
GET     /admin/experiment/parameter/:id controllers.Admin.displayParameter(id:Long)
POST    /admin/experiment/parameter/save                controllers.Admin.saveBrownPetersonParameter(id:Long)
GET     /admin/experiment/brown-peterson/question       controllers.Admin.displayBrownPetersonQuestionList()
GET     /admin/experiment/brown-peterson/question/add   controllers.Admin.addBrownPetersonQuestion()
POST    /admin/experiment/brown-peterson/question/save  controllers.Admin.saveBrownPetersonQuestion()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
